{"version":3,"sources":["store/auth/types.ts","repositpry/auth.ts","plugins/axios.ts","store/auth/reducer.ts","store/project/types.ts","store/project/reducer.ts","store/task/types.ts","store/task/reducer.ts","store/user/types.ts","store/user/reducer.ts","store/index.ts","store/auth/actions.ts","pages/Auth.tsx","repositpry/project.ts","store/project/actions.ts","components/Project/ProjectCard.tsx","repositpry/task.ts","store/task/actions.ts","components/FormSelectorGlobal.tsx","components/Project/ProjectForm.tsx","pages/Home.tsx","layouts/AuthLayout.tsx","layouts/Header.tsx","layouts/BaseLayout.tsx","components/Task/TaskForm.tsx","components/CommentForm.tsx","components/CommentCard.tsx","components/OptionLabel.tsx","components/Task/TaskDetail.tsx","components/Task/TaskTable.tsx","repositpry/user.ts","components/User/UserTable.tsx","store/user/actions.ts","pages/ProjectDeail.tsx","router/routers.tsx","router/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SIGN_IN","LOG_OUT","url","authRepository","login","password","axios","post","response","params","activeUser","JSON","parse","localStorage","getItem","setToken","token","defaults","headers","common","Authorization","interceptors","request","use","res","error","userActive","setItem","initialState","SET_PROJECT_BY_AUHTOR","SET_PROJECT","SET_STATUSES","SET_USERS","UNSET_USERS","ADD_CRAETED_PROJECT","DELETE_PROJECT","SET_COMMENTS","SET_COMMENT","projects","projectsDetail","statuses","projectComments","SET_TASK_BY_PROJECT","SET_TASK","ADD_CRAETED_TASK","SET_UPDATED_TASK","DELETE_TASK","SET_TYPES","SET_PRIORITIES","tasks","tasksByProject","tasksDetail","types","priorities","taskComments","GET_USERS","users","rootReducer","combineReducers","auth","state","action","type","stringify","payload","project","id","filter","projectId","currentProject","updatedProject","team","userIds","map","user","Boolean","currentProjectOnDeleteUsers","updatedProjectAfterDeleteUsers","includes","length","comment","createdComment","currentProjectCommentList","task","toString","updatedTask","taskListByProject","taskList","taskId","notification","config","duration","dispatchWrapper","method","typeDispatch","customParams","dispatch","a","resultResponse","data","result","message","status","Auth","useDispatch","useState","setAuth","className","title","visible","footer","closable","initialValues","remember","autoComplete","Item","label","name","rules","required","value","onChange","target","Password","wrapperCol","offset","onClick","sigIn","ProjectRepository","authorId","get","createProjectParams","patch","delete","createProject","projectCreateParams","success","create","projectUpdateParams","update","getProjectStatuses","getStatuses","addUsersToProject","removeUsersFromProject","deleteUsersFromProject","projectCreateComment","createComment","ProjectCard","hoverable","extra","to","style","minWidth","description","onConfirm","okText","cancelText","size","icon","DeleteOutlined","taskRepository","taskCreatreateParams","createTask","taskCreateParams","taskUpdateParams","getTaskStatuses","getTaskTypes","getTypes","getTaskPriorities","getPriorities","taskCreateComment","FormSelectorGlobal","domainName","entityName","selectorName","onSelect","valueDefault","entityList","useSelector","store","options","domainActions","handleChange","Number","onFocus","option","Option","TextArea","Input","ProjectForm","sendFormData","projectDefault","statusId","isEditMode","Form","useForm","form","setFieldsValue","useEffect","layout","onFinish","values","min","span","textAlign","htmlType","Home","activeUserId","isModalVisible","setIsModalVisible","handleCancel","userId","getAllByAuthorId","padding","justify","align","PlusOutlined","wrap","onOk","onCancel","AuthLayout","children","Header","userLogOut","ghost","color","danger","backgroundColor","BaseLayout","TaskForm","taskDefault","priority","typeId","priorityId","CommentForm","methodSubmitComment","disaptch","body","getFieldValue","resetFields","CommentCard","content","author","datetime","Date","createdAt","toLocaleDateString","OptionLabel","colorStatus","text","Panel","Collapse","Taskdetail","comments","NaN","onShowCommentBlock","getComments","executor","accordion","header","maxHeight","overflowY","TaskTable","taskModalForm","setTaskModalForm","currentTask","setCurrentTask","currentTaskId","setCurrentTaskId","onDeleteTask","deleteTask","onShowDetail","findOneById","columns","dataIndex","key","render","_","selectedTask","find","onEditTask","EditOutlined","width","dataSource","bordered","userRepository","UserTable","getUser","transfetAllUsers","disabled","transfetProjectUsers","teamEditModal","setTeamEditModal","targetKeys","setTargetKeys","selectedKeys","setSelectedKeys","getAll","titles","newTargetKeys","direction","moveKeys","left","right","onSelectChange","sourceSelectedKeys","targetSelectedKeys","item","oneWay","marginBottom","ProjectDetail","useParams","projectModalForm","setProjectModalForm","setTasktModalForm","getAllTasksByProjectId","getTasksByProjectId","routers","path","isGuard","component","getFilteredRoutesByAuthorizationUser","userIsAuth","getRedirectPath","isAuthorization","App","routes","isUserActive","filteredRoutes","router","exact","pathname","useRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","thunkMiddleware","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.73cf7d90.chunk.js","sourcesContent":["import { UserAuthentificated } from \"../../types\";\r\nexport interface ISignIn {\r\n    type: typeof SIGN_IN,\r\n    payload: UserAuthentificated,\r\n}\r\n\r\nexport interface ISignUp {\r\n    type: typeof SIGN_UP,\r\n    payload: UserAuthentificated,\r\n}\r\nexport interface ILogOut {\r\n    type: typeof LOG_OUT,\r\n    payload: null,\r\n}\r\n\r\nexport const SIGN_IN = 'AUTH/SIGN_IN';\r\nexport const SIGN_UP = 'AUTH/SIGN_UP';\r\nexport const LOG_OUT = 'AUTH/LOG_OUT';\r\n\r\nexport type actionTypes = ISignIn | ISignUp | ILogOut;","import axios from \"axios\";\r\nimport { User, UserAuthentificated } from \"../types\";\r\n\r\nconst url = 'http://localhost:7000/auth'\r\n\r\nexport type T_SING_IN = {\r\n    result: {\r\n        token: string;\r\n    };\r\n};\r\n\r\nexport type T_PARAMS_SING_IN = {\r\n    login: string;\r\n    password: string;\r\n}\r\n\r\nexport type SignUpParams = {\r\n    login: string;\r\n    password: string;\r\n    name: string;\r\n}\r\n\r\nexport type SIGN_IN_RESPONSE = { token: string };\r\nexport type ResponseResult<T> = { data: { result: T } }\r\n\r\nexport class authRepository {\r\n\r\n    static async sigIn({ login, password }: T_PARAMS_SING_IN): Promise<UserAuthentificated> {\r\n        const response: any = await axios.post(`${url}/login`, { login, password });\r\n        return response;\r\n    }\r\n\r\n    static async signUp(params: SignUpParams): Promise<UserAuthentificated> {\r\n        const response: any = await axios.post(`${url}/registration`, params);\r\n        return response;\r\n    }\r\n}","import axios from \"axios\";\r\nimport { UserAuthentificated } from \"../types\";\r\n\r\nconst activeUser: UserAuthentificated = JSON.parse(\r\n  localStorage?.getItem(\"userActive\") || \"{}\"\r\n);\r\n\r\nexport const setToken = (token: string) => {\r\n  axios.defaults.headers.common = { Authorization: `Bearer ${token}` };\r\n  // axios.defaults.headers.common = { Authorization: `Bearer ${activeUser.token}` };\r\n};\r\n\r\nsetToken(activeUser?.token);\r\n\r\naxios.interceptors.request.use(\r\n  (res) => res,\r\n  (error) => error\r\n);\r\n\r\naxios.interceptors.response.use(\r\n  (res) => res,\r\n  (error) => error\r\n);\r\n","import {actionTypes, LOG_OUT, SIGN_IN,} from \"./types\";\r\nimport { UserAuthentificated } from \"../../types\";\r\n\r\nimport { setToken } from \"../../plugins/axios\";\r\n\r\nexport type AuthState = {\r\n    userActive: UserAuthentificated \r\n};\r\n\r\nexport type AuthRootState = {\r\n    auth: AuthState;\r\n}\r\nif(!localStorage?.userActive) localStorage.setItem('userActive', '{}'); \r\n\r\nconst initialState = {\r\n    userActive: JSON.parse(localStorage?.userActive) || '',\r\n};\r\n\r\nexport const authReducer = (state = initialState, action: actionTypes) => {\r\n    switch (action.type) {\r\n        case SIGN_IN:\r\n            localStorage.userActive = JSON.stringify(action.payload);\r\n            setToken(action.payload?.token);\r\n            return {...state, userActive: action.payload, token: action.payload.token };\r\n        case LOG_OUT:\r\n            localStorage.token = '';\r\n            localStorage.userActive = '{}'\r\n            return {...state, token: '', userActive: '{}'};\r\n        default:\r\n            return state;\r\n    }\r\n};","import {\r\n  ProjectBase,\r\n  Option,\r\n  ProjectDetail,\r\n  ActionUserWithProjectParams,\r\n  ActionUserWithProjectResult,\r\n  ProjectComment,\r\n} from \"../../types\";\r\n\r\nexport interface setProjectsByAuthor {\r\n  type: typeof SET_PROJECT_BY_AUHTOR;\r\n  payload: ProjectBase[];\r\n}\r\nexport interface setProject {\r\n  type: typeof SET_PROJECT;\r\n  payload: ProjectDetail;\r\n}\r\n\r\nexport interface addCreatedProject {\r\n  type: typeof ADD_CRAETED_PROJECT;\r\n  payload: ProjectBase;\r\n}\r\nexport interface setUpdatedProject {\r\n  type: typeof SET_UPDATED_PROJECT;\r\n  payload: ProjectBase;\r\n}\r\nexport interface deleteProject {\r\n  type: typeof DELETE_PROJECT;\r\n  payload: number;\r\n}\r\n\r\nexport interface setStatuses {\r\n  type: typeof SET_STATUSES;\r\n  payload: Option[];\r\n}\r\nexport interface setOnUsersOnProject {\r\n  type: typeof SET_USERS;\r\n  payload: ActionUserWithProjectResult;\r\n}\r\nexport interface removeUsersFromProject {\r\n  type: typeof UNSET_USERS;\r\n  payload: ActionUserWithProjectResult;\r\n}\r\n\r\nexport interface getProjectComments {\r\n  type: typeof SET_COMMENTS;\r\n  payload: ProjectComment[];\r\n}\r\nexport interface createComment {\r\n  type: typeof SET_COMMENT;\r\n  payload: ProjectComment;\r\n}\r\n\r\nexport const SET_PROJECT_BY_AUHTOR = \"PROJECTS/SET_PROJECT_BY_AUHTOR\";\r\nexport const SET_PROJECT = \"PROJECTS/SET_PROJECT\";\r\nexport const SET_STATUSES = \"PROJECTS/SET_STATUSES\";\r\nexport const SET_USERS = \"PROJECTS/SET_USERS\";\r\nexport const UNSET_USERS = \"PROJECTS/UNSET_USERS\";\r\nexport const ADD_CRAETED_PROJECT = \"PROJECTS/ADD_CRAETED_PROJECT\";\r\nexport const SET_UPDATED_PROJECT = \"PROJECTS/SET_UPDATED_PROJECT\";\r\nexport const DELETE_PROJECT = \"PROJECTS/DELETE_PROJECT\";\r\nexport const SET_COMMENTS = \"PROJECTS/SET_COMMENTS\";\r\nexport const SET_COMMENT = \"PROJECTS/SET_COMMENT\";\r\n\r\nexport type actionTypes =\r\n  | setProjectsByAuthor\r\n  | setProject\r\n  | setStatuses\r\n  | addCreatedProject\r\n  | deleteProject\r\n  | setOnUsersOnProject\r\n  | removeUsersFromProject\r\n  | getProjectComments\r\n  | createComment\r\n  | setUpdatedProject;\r\n","import {\r\n  actionTypes,\r\n  ADD_CRAETED_PROJECT,\r\n  DELETE_PROJECT,\r\n  SET_COMMENT,\r\n  SET_COMMENTS,\r\n  SET_PROJECT,\r\n  SET_PROJECT_BY_AUHTOR,\r\n  SET_STATUSES,\r\n  SET_USERS,\r\n  UNSET_USERS,\r\n} from \"./types\";\r\nimport {\r\n  Option,\r\n  ProjectBase,\r\n  ProjectComment,\r\n  ProjectDetail,\r\n} from \"../../types\";\r\n\r\nexport type ProjectState = {\r\n  projects: ProjectBase[];\r\n  projectsDetail: ProjectDetail[];\r\n  statuses: Option[];\r\n  projectComments: { [key: string | number]: ProjectComment[] };\r\n};\r\n\r\nexport type ProjectRootState = {\r\n  project: ProjectState;\r\n};\r\n\r\nconst initialState = {\r\n  projects: [],\r\n  projectsDetail: [],\r\n  statuses: [],\r\n  projectComments: [],\r\n};\r\n\r\nexport const projectReducer = (state = initialState, action: actionTypes) => {\r\n  switch (action.type) {\r\n    case SET_PROJECT_BY_AUHTOR:\r\n      return { ...state, projects: action.payload };\r\n    case SET_PROJECT:\r\n      return {\r\n        ...state,\r\n        projectsDetail: {\r\n          ...state.projectsDetail,\r\n          [action.payload.id]: action.payload,\r\n        },\r\n      };\r\n    case ADD_CRAETED_PROJECT:\r\n      return { ...state, projects: [...state.projects, action.payload] };\r\n    case DELETE_PROJECT:\r\n      return {\r\n        ...state,\r\n        projects: state.projects.filter(\r\n          (project: ProjectBase) => project.id !== action.payload\r\n        ),\r\n      };\r\n    case SET_USERS:\r\n      const { projectId, users } = action.payload;\r\n      const currentProject: ProjectDetail = state.projectsDetail[projectId];\r\n      const updatedProject = {\r\n        ...currentProject,\r\n        team: [...currentProject?.team || [], ...users || []],\r\n      };\r\n      return {\r\n        ...state,\r\n        projectsDetail: {\r\n          ...state.projectsDetail,\r\n          [projectId]: updatedProject,\r\n        },\r\n      };\r\n    case UNSET_USERS:\r\n      const params = action.payload;\r\n      const userIds = params.users?.map((user) => user?.id)?.filter(Boolean) || [];\r\n      const currentProjectOnDeleteUsers: ProjectDetail =\r\n        state.projectsDetail[params.projectId];\r\n      const updatedProjectAfterDeleteUsers = {\r\n        ...currentProjectOnDeleteUsers,\r\n        team: currentProjectOnDeleteUsers?.team.filter(\r\n          ({ id }) => !userIds.includes(id)\r\n        ),\r\n      };\r\n      return {\r\n        ...state,\r\n        projectsDetail: {\r\n          ...state.projectsDetail,\r\n          [params.projectId]: updatedProjectAfterDeleteUsers,\r\n        },\r\n      };\r\n    case SET_STATUSES:\r\n      return {\r\n        ...state,\r\n        statuses: action.payload,\r\n      };\r\n    case SET_COMMENTS:\r\n      if (!action?.payload?.length) return state;\r\n      const comment: ProjectComment = action.payload[0];\r\n      return {\r\n        ...state,\r\n        projectComments: {\r\n          ...state.projectComments,\r\n          [comment.projectId]: action.payload,\r\n        },\r\n      };\r\n\r\n    case SET_COMMENT:\r\n      if (!action?.payload) return state;\r\n      const createdComment = action.payload;\r\n      const currentProjectCommentList =\r\n        [\r\n          ...state.projectComments[createdComment.projectId],\r\n          createdComment,\r\n        ] || [];\r\n      return {\r\n        ...state,\r\n        projectComments: {\r\n          ...state.projectComments,\r\n          [createdComment.projectId]: currentProjectCommentList,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Option, Task, TaskComment } from \"../../types\";\r\n\r\nexport interface setTasksByProject {\r\n  type: typeof SET_TASK_BY_PROJECT;\r\n  payload: Task[];\r\n}\r\nexport interface setTask {\r\n  type: typeof SET_TASK;\r\n  payload: Task;\r\n}\r\n\r\nexport interface addCreatedTask {\r\n  type: typeof ADD_CRAETED_TASK;\r\n  payload: Task;\r\n}\r\nexport interface setUpdatedTask {\r\n  type: typeof SET_UPDATED_TASK;\r\n  payload: Task;\r\n}\r\nexport interface deleteTask {\r\n  type: typeof DELETE_TASK;\r\n  payload: Task;\r\n}\r\n\r\nexport interface setStatuses {\r\n  type: typeof SET_STATUSES;\r\n  payload: Option[];\r\n}\r\nexport interface setTypes {\r\n  type: typeof SET_TYPES;\r\n  payload: Option[];\r\n}\r\nexport interface setPriorities {\r\n  type: typeof SET_PRIORITIES;\r\n  payload: Option[];\r\n}\r\n\r\nexport interface getTaskComments {\r\n  type: typeof SET_COMMENTS;\r\n  payload: TaskComment[];\r\n}\r\nexport interface createComment {\r\n  type: typeof SET_COMMENT;\r\n  payload: TaskComment;\r\n}\r\n\r\nexport const SET_TASK_BY_PROJECT = \"TASK/SET_TASK_BY_PROJECT\";\r\nexport const SET_TASK = \"TASK/SET_TASK\";\r\nexport const ADD_CRAETED_TASK = \"TASK/ADD_CRAETED_TASK\";\r\nexport const SET_UPDATED_TASK = \"TASK/SET_UPDATED_TASK\";\r\nexport const DELETE_TASK = \"TASK/DELETE_TASK\";\r\nexport const SET_STATUSES = \"TASKK/SET_STATUSES\";\r\nexport const SET_TYPES = \"TASK/SET_TYPES\";\r\nexport const SET_PRIORITIES = \"TASK/SET_PRIORITIES\";\r\nexport const SET_COMMENTS = \"TASK/SET_COMMENTS\";\r\nexport const SET_COMMENT = \"TASK/SET_COMMENT\";\r\n\r\nexport type actionTypes =\r\n  | setTasksByProject\r\n  | setTask\r\n  | addCreatedTask\r\n  | deleteTask\r\n  | setTypes\r\n  | setPriorities\r\n  | setUpdatedTask\r\n  | getTaskComments\r\n  | createComment\r\n  | setStatuses;\r\n","import {\r\n    actionTypes,\r\n    SET_TASK_BY_PROJECT,\r\n    SET_TASK,\r\n    ADD_CRAETED_TASK,\r\n    DELETE_TASK,\r\n    SET_TYPES,\r\n    SET_PRIORITIES,\r\n    SET_STATUSES,\r\n    SET_UPDATED_TASK,\r\n    SET_COMMENTS,\r\n    SET_COMMENT,\r\n} from './types';\r\nimport { Option, Task, TaskComment } from \"../../types\";\r\n\r\nexport type TasktState = {\r\n    tasks: Task[];\r\n    tasksDetail: { [key: string]: Task };\r\n    tasksByProject: { [key: number]: Task[] };\r\n    statuses: Option[];\r\n    types: Option[];\r\n    priorities: Option[];\r\n    taskComments: { [key: string | number]: TaskComment[] };\r\n\r\n};\r\n\r\nexport type TaskRootState = {\r\n    task: TasktState;\r\n}\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    tasksByProject: [],\r\n    tasksDetail: {},\r\n    statuses: [],\r\n    types: [],\r\n    priorities: [],\r\n    taskComments: [],\r\n};\r\n\r\n\r\nexport const taskReducer = (state = initialState, action: actionTypes) => {\r\n    switch (action.type) {\r\n        case SET_TASK_BY_PROJECT:\r\n            if (!action?.payload?.length) return state;\r\n            const task: Task = action.payload[0]\r\n            return {\r\n                ...state, tasksByProject: {\r\n                    ...state.tasksByProject,\r\n                    [task.projectId]: action.payload\r\n                }\r\n            };\r\n        case SET_TASK:\r\n            return {\r\n                ...state, tasksDetail: {\r\n                    ...state.tasksDetail,\r\n                    [action.payload?.id.toString()]: action?.payload\r\n                }\r\n            };\r\n        case ADD_CRAETED_TASK:\r\n            const tasks = state.tasksByProject[action.payload.projectId];\r\n            return {\r\n                ...state, tasksByProject: {\r\n                    ...state.tasksByProject,\r\n                    [action.payload.projectId]: [...tasks, action.payload],\r\n                }\r\n            };\r\n        case SET_UPDATED_TASK:\r\n            const updatedTask: Task = action.payload;\r\n            const taskListByProject: Task[] = state.tasksByProject[updatedTask.projectId] || [];\r\n            return {\r\n                ...state, tasksByProject: {\r\n                    ...state.tasksByProject,\r\n                    [updatedTask.projectId]: [updatedTask, ...taskListByProject?.filter(({ id }: Task) => +updatedTask.id !== +id)],\r\n                }\r\n            };\r\n        case DELETE_TASK:\r\n            const { id, projectId }: Task = action.payload;\r\n            const taskList: Task[] = state.tasksByProject[projectId] || [];\r\n            return {\r\n                ...state, tasksByProject: {\r\n                    ...state.tasksByProject,\r\n                    [projectId]: taskList?.filter((task: Task) => task.id !== id),\r\n                }\r\n            };\r\n        case SET_STATUSES:\r\n            return {\r\n                ...state, statuses: action.payload,\r\n            };\r\n        case SET_TYPES:\r\n            return {\r\n                ...state, types: action.payload,\r\n            };\r\n        case SET_PRIORITIES:\r\n            return {\r\n                ...state, priorities: action.payload,\r\n            };\r\n            case SET_COMMENTS:\r\n                if (!action?.payload?.length) return state;\r\n                const comment: TaskComment = action.payload[0];\r\n                return {\r\n                  ...state,\r\n                  taskComments: {\r\n                    ...state.taskComments,\r\n                    [comment.taskId]: action.payload,\r\n                  },\r\n                };\r\n          \r\n              case SET_COMMENT:\r\n                if (!action?.payload) return state;\r\n                const createdComment = action.payload;\r\n                const currentProjectCommentList =\r\n                  [\r\n                    ...state.taskComments[createdComment.taskId] || [],\r\n                    createdComment,\r\n                  ] || [];\r\n                return {\r\n                  ...state,\r\n                  taskComments: {\r\n                    ...state.taskComments,\r\n                    [createdComment.taskId]: currentProjectCommentList,\r\n                  },\r\n                };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { User } from \"../../types\";\r\nexport interface getUsers {\r\n    type: typeof GET_USERS,\r\n    payload: User[],\r\n}\r\n\r\n\r\nexport const GET_USERS = 'USER/GET_USERS';\r\n\r\nexport type actionTypes = getUsers;","import {actionTypes, GET_USERS,} from \"./types\";\r\nimport { User } from \"../../types\";\r\n\r\nexport type UserState = {\r\n    users: User[] \r\n    userActive: User \r\n};\r\n\r\nexport type UserRootState = {\r\n    user: UserState;\r\n}\r\n\r\nconst initialState = {\r\n    users: [],\r\n    userActive: JSON.parse(localStorage.getItem('userActive') || '{}'),\r\n};\r\n\r\nexport const userReducer = (state = initialState, action: actionTypes) => {\r\n    switch (action.type) {\r\n        case GET_USERS:\r\n            return {...state, users: action.payload };\r\n        // case LOG_OUT:\r\n        //     localStorage.token = '';\r\n        //     localStorage.userActive = '{}'\r\n        //     return {...state, token: '', userActive: '{}'};\r\n        default:\r\n            return state;\r\n    }\r\n};","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport { authReducer } from './auth/reducer';\r\nimport { projectReducer } from \"./project/reducer\";\r\nimport { taskReducer } from \"./task/reducer\";\r\nimport { userReducer } from \"./user/reducer\";\r\nimport { LOG_OUT } from \"./auth/types\";\r\nimport { message, notification } from \"antd\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    project: projectReducer,\r\n    task: taskReducer,\r\n    user: userReducer,\r\n});\r\n\r\nnotification.config({\r\n    duration: 1.3,\r\n  });\r\n\r\n\r\nexport const dispatchWrapper = (method: any, params: any, typeDispatch: any, customParams?: any) => async (dispatch: any) => {\r\n    const resultResponse = await method(params);\r\n    const { data, response } = resultResponse;\r\n    if (data?.result) return dispatch({ type: typeDispatch, payload: customParams || data.result });\r\n    message.error(response.data.message);\r\n    if (response?.status === 401) return  dispatch({ type: LOG_OUT})\r\n  }\r\n\r\nexport default function configureStore() {\r\n    const middlewares = [thunkMiddleware];\r\n    const middleWareEnhancer = applyMiddleware(...middlewares);\r\n\r\n    const store = createStore(\r\n        rootReducer,\r\n        composeWithDevTools(middleWareEnhancer)\r\n    );\r\n\r\n    return store;\r\n}","import { LOG_OUT, SIGN_IN, SIGN_UP } from \"./types\";\r\nimport {\r\n  authRepository,\r\n  SignUpParams,\r\n  T_PARAMS_SING_IN,\r\n} from \"../../repositpry/auth\";\r\nimport { dispatchWrapper } from \"..\";\r\n\r\nexport const signIn = (params: T_PARAMS_SING_IN) =>\r\n  dispatchWrapper(authRepository.sigIn, params, SIGN_IN);\r\n\r\nexport const signUp = (params: SignUpParams) =>\r\n  dispatchWrapper(authRepository.signUp, params, SIGN_UP);\r\n\r\nexport const logOut = () => ({ type: LOG_OUT })\r\n","import React, {useState} from 'react';\r\nimport {Form, Input, Button, Checkbox, Modal} from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signIn} from \"../store/auth/actions\";\r\n\r\nconst Auth: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const [auth, setAuth] = useState({\r\n        login: '',\r\n        password: '',\r\n    });\r\n    const userSignIn = () => {\r\n      dispatch(signIn(auth));\r\n    }\r\n\r\n    return <div className='authorization-page'>\r\n        <Modal title=\"Authorization\" visible={true} footer={null} closable={false}>\r\n            <Form\r\n                initialValues={{remember: true}}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    rules={[{required: true, message: 'Please input your username!'}]}\r\n                >\r\n                    <Input value={auth.login}\r\n                           onChange={({target}) => {\r\n                               setAuth({...auth, login: target.value});\r\n                           }}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{required: true, message: 'Please input your password!'}]}\r\n                >\r\n                    <Input.Password onChange={({target}) => {\r\n                        setAuth({...auth, password: target.value});\r\n                    }}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{offset: 20}}>\r\n                    <Button type=\"primary\" onClick={userSignIn}>\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n\r\n    </div>\r\n};\r\n\r\nexport default Auth;\r\n","import axios from \"axios\";\r\nimport {\r\n  ProjectBase,\r\n  Option,\r\n  ProjectCreateParams,\r\n  ProjectDetail,\r\n  ActionUserWithProjectParams,\r\n  CommentCraeteParams,\r\n} from \"../types\";\r\n\r\nconst url = \"http://localhost:7000/project\";\r\n\r\nexport class ProjectRepository {\r\n  static async getAllByAuthorId(authorId: number): Promise<ProjectBase[]> {\r\n    const response: any = await axios.get(`${url}/author/${authorId}`);\r\n    return response;\r\n  }\r\n  static async findOneById(projectId: number): Promise<ProjectBase> {\r\n    const response: any = await axios.get(`${url}/${projectId}`);\r\n    return response;\r\n  }\r\n  static async create(\r\n    createProjectParams: ProjectCreateParams\r\n  ): Promise<Option[]> {\r\n    const response: any = await axios.post(`${url}`, createProjectParams);\r\n    return response;\r\n  }\r\n  static async update(project: ProjectBase): Promise<ProjectDetail> {\r\n    const response: any = await axios.patch(`${url}/${project.id}`, project);\r\n    return response;\r\n  }\r\n  static async delete(id: number): Promise<any> {\r\n    const response: any = await axios.delete(`${url}/${id}`);\r\n    return response;\r\n  }\r\n  static async getStatuses(): Promise<Option[]> {\r\n    const response: any = await axios.get(`${url}/statuses/all`);\r\n    return response;\r\n  }\r\n  static async addUsersToProject({\r\n    projectId,\r\n    userIds,\r\n  }: ActionUserWithProjectParams): Promise<any> {\r\n    const response: any = await axios.patch(`${url}/${projectId}/users`, {\r\n      userIds,\r\n    });\r\n    return response;\r\n  }\r\n  static async deleteUsersFromProject({\r\n    projectId,\r\n    userIds,\r\n  }: ActionUserWithProjectParams): Promise<any> {\r\n    const response: any = await axios.delete(`${url}/${projectId}/users`, {\r\n      data: { userIds },\r\n    });\r\n    return response;\r\n  }\r\n  static async getComments(projectId: number): Promise<any> {\r\n    const response: any = await axios.get(`${url}/${projectId}/comment/all`,);\r\n    return response;\r\n  }\r\n  static async createComment(params: CommentCraeteParams): Promise<any> {\r\n    const response: any = await axios.patch(`${url}/comment/add`, params);\r\n    return response;\r\n  }\r\n}\r\n","import { dispatchWrapper } from \"../../store\";\r\nimport { ProjectRepository } from \"../../repositpry/project\";\r\nimport {\r\n  ActionUserWithProjectParams,\r\n  CommentCraeteParams,\r\n  ProjectCreateParams,\r\n  ProjectDetail,\r\n} from \"../../types\";\r\nimport {\r\n  ADD_CRAETED_PROJECT,\r\n  DELETE_PROJECT,\r\n  SET_COMMENT,\r\n  SET_COMMENTS,\r\n  SET_PROJECT,\r\n  SET_PROJECT_BY_AUHTOR,\r\n  SET_STATUSES,\r\n  SET_USERS,\r\n  UNSET_USERS,\r\n} from \"./types\";\r\nimport { message, notification } from \"antd\";\r\n\r\nexport const getProjectsByAuthor = (userId: number) =>\r\n  dispatchWrapper(\r\n    ProjectRepository.getAllByAuthorId,\r\n    userId,\r\n    SET_PROJECT_BY_AUHTOR\r\n  );\r\nexport const getProjectById = (projectId: number) =>\r\n  dispatchWrapper(ProjectRepository.findOneById, projectId, SET_PROJECT);\r\n\r\nexport const createProject = (projectCreateParams: ProjectCreateParams) => {\r\n  notification.success({\r\n    message: 'Project was created',\r\n  })\r\n  return dispatchWrapper(\r\n    ProjectRepository.create,\r\n    projectCreateParams,\r\n    ADD_CRAETED_PROJECT\r\n  );\r\n}\r\n\r\nexport const updatedProject = (projectUpdateParams: ProjectDetail) => {\r\n  notification.success({\r\n    message: 'Project was updated',\r\n  });\r\n  return dispatchWrapper(ProjectRepository.update, projectUpdateParams, SET_PROJECT);\r\n}\r\n\r\nexport const deleteProject = (id: number) => {\r\n  notification.success({\r\n    message: 'Project was delted',\r\n  })\r\n  return dispatchWrapper(ProjectRepository.delete, id, DELETE_PROJECT);\r\n}\r\n  \r\nexport const getProjectStatuses = () =>\r\n  dispatchWrapper(ProjectRepository.getStatuses, \"\", SET_STATUSES);\r\n\r\nexport const addUsersToProject =\r\n  (params: ActionUserWithProjectParams) =>\r\n  dispatchWrapper(ProjectRepository.addUsersToProject, params, SET_USERS);\r\n\r\nexport const removeUsersFromProject =\r\n  (params: ActionUserWithProjectParams) =>\r\n  dispatchWrapper(ProjectRepository.deleteUsersFromProject, params, UNSET_USERS);\r\n\r\nexport const getProjectComments =\r\n  (projectId: number) =>\r\n  dispatchWrapper(ProjectRepository.getComments, projectId, SET_COMMENTS);\r\n\r\nexport const projectCreateComment =\r\n  (comment: CommentCraeteParams) =>\r\n  dispatchWrapper(ProjectRepository.createComment, comment, SET_COMMENT);\r\n\r\n","import React from \"react\";\r\nimport { Button, Card, Popconfirm } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { ProjectBase } from \"../../types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteProject } from \"../../store/project/actions\";\r\nimport \"../../assets/scss/project-card.scss\";\r\n\r\nconst ProjectCard: React.FC<{ project: ProjectBase }> = ({ project }) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Card\r\n      className=\"project-card\"\r\n      hoverable\r\n      title={project.title}\r\n      extra={[<Link to={`project/${project.id}`}>Detail</Link>]}\r\n      style={{ minWidth: \"300px\" }}\r\n    >\r\n      <div className=\"project-card__description\">{project.description}</div>\r\n      <div className=\"project-card__actions\">\r\n      <Popconfirm\r\n            title=\"Do you wanna delete this project ?\"\r\n            onConfirm={() => dispatch(deleteProject(project.id))}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Button \r\n            type=\"primary\"\r\n             size=\"small\"\r\n             icon={<DeleteOutlined key=\"edit\" />}\r\n             >\r\n              Delete\r\n            </Button>\r\n          </Popconfirm>\r\n    \r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import axios from \"axios\";\r\nimport { CommentCraeteParams, Option, Task, TaskCreateParams, TaskUpdateParams } from \"../types\";\r\n\r\nconst url = 'http://localhost:7000/tasks'\r\n\r\n\r\nexport class taskRepository {\r\n    static async getAllTasksByProjectId(projectId: number): Promise<Task[]> {\r\n        const response: any = await axios.get(`${url}/project/${projectId}`);\r\n        return response\r\n    }\r\n    static async findOneById(taskId: number): Promise<Task> {\r\n        const response: any = await axios.get(`${url}/${taskId}`);\r\n        return response\r\n    }\r\n    static async create(taskCreatreateParams: TaskCreateParams): Promise<Option[]> {\r\n        const response: any = await axios.post(`${url}`, taskCreatreateParams);\r\n        return response\r\n    }\r\n    static async update(task: TaskUpdateParams): Promise<Task> {\r\n        const response: any = await axios.patch(`${url}/${task.id}`, task);\r\n        return response\r\n    }\r\n    static async delete(task: Task): Promise<any> {\r\n        const response: any = await axios.delete(`${url}/${task.id}`);\r\n        return response\r\n    }\r\n    static async getStatuses(): Promise<Option[]> {\r\n        const response: any = await axios.get(`${url}/statuses/all`);\r\n        return response\r\n    }\r\n    static async getTypes(): Promise<Option[]> {\r\n        const response: any = await axios.get(`${url}/types/all`);\r\n        return response\r\n    }\r\n    static async getPriorities(): Promise<Option[]> {\r\n        const response: any = await axios.get(`${url}/priorities/all`);\r\n        return response\r\n    }\r\n    static async getComments(taskId: number): Promise<any> {\r\n        const response: any = await axios.get(`${url}/${taskId}/comment/all`,);\r\n        return response;\r\n      }\r\n      static async createComment(params: CommentCraeteParams): Promise<any> {\r\n        const response: any = await axios.patch(`${url}/comment/add`, params);\r\n        return response;\r\n      }\r\n}","import { notification } from \"antd\";\r\nimport { dispatchWrapper } from \"..\";\r\nimport { taskRepository } from \"../../repositpry/task\";\r\nimport {\r\n  CommentCraeteParams,\r\n  Task,\r\n  TaskCreateParams,\r\n  TaskUpdateParams,\r\n} from \"../../types\";\r\nimport {\r\n  ADD_CRAETED_TASK,\r\n  DELETE_TASK,\r\n  SET_COMMENT,\r\n  SET_COMMENTS,\r\n  SET_PRIORITIES,\r\n  SET_STATUSES,\r\n  SET_TASK,\r\n  SET_TASK_BY_PROJECT,\r\n  SET_TYPES,\r\n  SET_UPDATED_TASK,\r\n} from \"./types\";\r\n\r\nexport const getTasksByProjectId = (projectId: number) =>\r\n  dispatchWrapper(\r\n    taskRepository.getAllTasksByProjectId,\r\n    projectId,\r\n    SET_TASK_BY_PROJECT\r\n  );\r\n\r\nexport const getTaskById = (taskId: number) =>\r\n  dispatchWrapper(taskRepository.findOneById, taskId, SET_TASK);\r\n\r\nexport const createTask = (taskCreateParams: TaskCreateParams) => {\r\n  notification.success({\r\n    message: \"Task was created\",\r\n  });\r\n  return dispatchWrapper(\r\n    taskRepository.create,\r\n    taskCreateParams,\r\n    ADD_CRAETED_TASK\r\n  );\r\n};\r\n\r\nexport const updatedTask = (taskUpdateParams: TaskUpdateParams) => {\r\n  notification.success({\r\n    message: \"Task was updated\",\r\n  });\r\n  return dispatchWrapper(\r\n    taskRepository.update,\r\n    taskUpdateParams,\r\n    SET_UPDATED_TASK\r\n  );\r\n};\r\n\r\nexport const deleteTask = (task: Task) => {\r\n  notification.success({\r\n    message: \"Task was deleted\",\r\n  });\r\n  return dispatchWrapper(taskRepository.delete, task, DELETE_TASK, task);\r\n};\r\n\r\nexport const getTaskStatuses = () =>\r\n  dispatchWrapper(taskRepository.getStatuses, \"\", SET_STATUSES);\r\n\r\nexport const getTaskTypes = () =>\r\n  dispatchWrapper(taskRepository.getTypes, \"\", SET_TYPES);\r\n\r\nexport const getTaskPriorities = () =>\r\n  dispatchWrapper(taskRepository.getPriorities, \"\", SET_PRIORITIES);\r\n\r\nexport const getTaskComments = (projectId: number) =>\r\n  dispatchWrapper(taskRepository.getComments, projectId, SET_COMMENTS);\r\n\r\nexport const taskCreateComment = (comment: CommentCraeteParams) =>\r\n  dispatchWrapper(taskRepository.createComment, comment, SET_COMMENT);\r\n","import {\r\n    Form,\r\n    Select,\r\n} from 'antd';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getProjectStatuses } from '../store/project/actions';\r\nimport { getTaskPriorities, getTaskStatuses, getTaskTypes } from '../store/task/actions';\r\nimport { OptionGlobal } from '../types';\r\n\r\nconst FormSelectorGlobal: React.FC<{\r\n    value: OptionGlobal | null,\r\n    name: string;\r\n    label: string;\r\n    domainName: string;\r\n    entityName: string;\r\n    selectorName: string;\r\n    onSelect: (value: number) => void;\r\n}> = ({\r\n    name,\r\n    value,\r\n    label,\r\n    domainName,\r\n    entityName,\r\n    selectorName,\r\n    onSelect,\r\n}) => {\r\n        const dispatch = useDispatch();\r\n        const valueDefault = value || { id: '', name: '', value: '' };\r\n        const entityList = useSelector((store: any) => store[domainName][selectorName] || []);\r\n        const options = !entityList.length ? [valueDefault] : entityList;\r\n        const domainActions: any = {\r\n            'project': {\r\n                'status': getProjectStatuses,\r\n            },\r\n            'task': {\r\n                'status': getTaskStatuses,\r\n                'type': getTaskTypes,\r\n                'priority': getTaskPriorities,\r\n            },\r\n        };\r\n\r\n        const onActiveSelect = () => !entityList?.length && dispatch(domainActions[domainName][entityName]());\r\n\r\n        const handleChange = (value: any) => {\r\n            onSelect(Number(value));\r\n        };\r\n        handleChange(Number(valueDefault?.id));\r\n\r\n        return (<>\r\n            <Form.Item name={name} label={label} rules={[{\r\n                required: true,\r\n                message: `Please select ${domainName} ${entityName}`,\r\n            }]}>\r\n                <Select\r\n                    onFocus={onActiveSelect}\r\n                    onChange={handleChange}\r\n                >\r\n                    {options.map(\r\n                        (option: any) => <Select.Option\r\n                            key={`${option.id}-${option.name}`}\r\n                            value={option.id\r\n                            }>{option.name}</Select.Option>,\r\n                    )}\r\n                </Select>\r\n            </Form.Item>\r\n        </>\r\n        );\r\n    };\r\n\r\nexport default FormSelectorGlobal;","import { Button, Col, Form, FormInstance, Input, Row, Select } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AuthRootState } from \"../../store/auth/reducer\";\nimport {\n  createProject,\n  getProjectStatuses,\n  updatedProject,\n} from \"../../store/project/actions\";\nimport { ProjectRootState } from \"../../store/project/reducer\";\nimport { ProjectBase, ProjectCreateParams, Option } from \"../../types\";\nimport FormSelectorGlobal from \"../FormSelectorGlobal\";\nconst { TextArea } = Input;\n\nconst ProjectForm: React.FC<{\n  project: ProjectBase | null;\n  sendFormData: () => void;\n}> = ({ project, sendFormData }) => {\n  const dispatch = useDispatch();\n  const userActive = useSelector(\n    (store: AuthRootState) => store.auth.userActive\n  );\n  const authorId = project?.authorId || userActive.id;\n  const projectDefault: ProjectCreateParams | null = {\n    title: project?.title || \"\",\n    description: project?.description || \"\",\n    statusId: project?.statusId || 999,\n    authorId: project?.authorId || 999,\n  };\n  const isEditMode = Boolean(project?.id);\n  const [form]: [FormInstance<any>] = Form.useForm();\n  const statuses = useSelector(\n    (store: ProjectRootState) => store.project.statuses\n  );\n\n  form.setFieldsValue({ status: project?.status });\n  const onCreateProject = (values: any) => {\n    const params = { authorId, ...project, ...values };\n    const action = isEditMode ? updatedProject : createProject;\n    dispatch(action(params));\n    sendFormData();\n  };\n  const setStatus = (value: number) => {\n    value && form.setFieldsValue({ statusId: value });\n  };\n\n  useEffect(() => {\n    form.setFieldsValue(projectDefault);\n  });\n\n  return (\n    <>\n      <Form form={form} layout=\"horizontal\" onFinish={onCreateProject}>\n        <Form.Item\n          name=\"title\"\n          label=\"Title\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input project title\",\n            },\n            {\n              min: 10,\n              message: \"Min length 5\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          label=\"Description\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input project title\",\n            },\n            {\n              min: 10,\n              message: \"Min length 10\",\n            },\n          ]}\n        >\n          <TextArea />\n        </Form.Item>\n          <FormSelectorGlobal\n            value={project?.status || null}\n            name='statusId'\n            label='Status'\n            domainName='project'\n            entityName='status'\n            selectorName='statuses'\n            onSelect={setStatus}\n          ></FormSelectorGlobal>\n        <Form.Item>\n          <Row>\n            <Col span={24} style={{ textAlign: \"right\" }}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Submit\n              </Button>\n            </Col>\n          </Row>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default ProjectForm;\n","import { Button, Col, Modal, Row, Space } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport ProjectCard from '../components/Project/ProjectCard';\r\nimport ProjectForm from '../components/Project/ProjectForm';\r\nimport { AuthRootState } from '../store/auth/reducer';\r\nimport { getProjectsByAuthor } from '../store/project/actions';\r\nimport { ProjectRootState } from '../store/project/reducer';\r\n\r\nconst Home: React.FC = () => {\r\n    const activeUserId = useSelector((store: AuthRootState) => store.auth.userActive.id)\r\n    const dispatch = useDispatch();\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    useEffect(() => {\r\n        dispatch(getProjectsByAuthor(activeUserId))\r\n    }, []);\r\n\r\n    const projects = useSelector((state: ProjectRootState) => state.project.projects);\r\n    return (<div className='home-page' style={{ padding: '12px' }}>\r\n        <div style={{ padding: '12px' }}>\r\n            <Row justify=\"space-between\" align=\"middle\">\r\n                <Col >\r\n                    <div>Home page</div>\r\n                </Col>\r\n                <Col>\r\n                    <Button type=\"primary\" size='small' onClick={showModal} icon={\r\n                        <PlusOutlined />\r\n                    }>\r\n                        Create project\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n        <Space align=\"center\" wrap size={[8, 16]}>\r\n            {projects.map((project) => {\r\n                return <ProjectCard key={project.id} project={project} />;\r\n            })}\r\n        </Space>\r\n\r\n        <Modal\r\n            title=\"Projetc form\"\r\n            visible={isModalVisible}\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n            footer={null}\r\n        >\r\n            <ProjectForm project={null} sendFormData={handleCancel} />\r\n        </Modal>\r\n    </div>);\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst AuthLayout: React.FC<any> = ({children}) => (<div className='auth-layout'>\r\n    {children}\r\n</div> );\r\n\r\nexport default AuthLayout;\r\n","import { Button, PageHeader } from \"antd\";\r\nimport React from \"react\";\r\nimport { logOut } from \"../store/auth/actions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header: React.FC<any> = () => {\r\n  const dispatch = useDispatch();\r\n  const userLogOut = () => {\r\n    dispatch(logOut());\r\n  };\r\n\r\n  return (\r\n    <div className=\"header-layout\">\r\n      <PageHeader\r\n        ghost={false}\r\n        title={\r\n          <Button type=\"primary\">\r\n            <Link to=\"/\" color=\"red\">\r\n              <b> My task manager </b>\r\n            </Link>\r\n          </Button>\r\n        }\r\n        extra={[\r\n          <Button key=\"1\" type=\"primary\" danger onClick={() => userLogOut()}>\r\n            Logout\r\n          </Button>,\r\n        ]}\r\n        style={{ backgroundColor: \"var(--antd-wave-shadow-color)\" }}\r\n      ></PageHeader>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\n\r\nconst BaseLayout: React.FC<any> = ({children}) => (<div className='base-layout'>\r\n    <Header/>\r\n    {children}\r\n</div> );\r\n\r\nexport default BaseLayout;\r\n","import { Button, Col, Form, FormInstance, Input, Row, Select } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AuthRootState } from \"../../store/auth/reducer\";\r\nimport { createTask, updatedTask } from \"../../store/task/actions\";\r\nimport { Task, User } from \"../../types\";\r\nimport FormSelectorGlobal from \"../FormSelectorGlobal\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst TaskForm: React.FC<{\r\n  task: Task | null;\r\n  projectId: number | null;\r\n  users: User[] | null;\r\n  sendFormData: () => void;\r\n}> = ({ task, projectId, users, sendFormData }) => {\r\n  const dispatch = useDispatch();\r\n  const userActive = useSelector(\r\n    (store: AuthRootState) => store.auth.userActive\r\n  );\r\n  const authorId = task?.authorId || userActive.id;\r\n  const taskDefault: Task | null = task;\r\n  const isEditMode = Boolean(task?.id);\r\n  const [form]: [FormInstance<any>] = Form.useForm();\r\n\r\n  const onSubmit = (values: any) => {\r\n    const { status, type, priority } = values;\r\n    const params = {\r\n      projectId,\r\n      authorId,\r\n      statusId: status,\r\n      typeId: type,\r\n      priorityId: priority,\r\n      ...task,\r\n      ...values,\r\n    };\r\n    const action = isEditMode ? updatedTask : createTask;\r\n    dispatch(action(params));\r\n    sendFormData();\r\n  };\r\n  const setStatus = (value: number) => {\r\n    value && form.setFieldsValue({ priorityId: value });\r\n  };\r\n  const setPriority = (value: number) => {\r\n    value && form.setFieldsValue({ priorityId: value });\r\n  };\r\n  const setType = (value: number) => {\r\n    value && form.setFieldsValue({ typeId: value });\r\n  };\r\n  useEffect(() => {\r\n    form.setFieldsValue({ ...taskDefault, ...task });\r\n  }, [task]);\r\n\r\n  return (\r\n    <>\r\n      <Form form={form} layout=\"horizontal\" onFinish={onSubmit}>\r\n        <Form.Item\r\n          name=\"title\"\r\n          label=\"Title\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input task title\",\r\n            },\r\n            {\r\n              min: 10,\r\n              message: \"Min length 5\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"Description\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input task title\",\r\n            },\r\n            {\r\n              min: 10,\r\n              message: \"Min length 10\",\r\n            },\r\n          ]}\r\n        >\r\n          <TextArea />\r\n        </Form.Item>\r\n\r\n        <FormSelectorGlobal\r\n          label=\"Status\"\r\n          name=\"statusId\"\r\n          domainName=\"task\"\r\n          entityName=\"status\"\r\n          selectorName=\"statuses\"\r\n          value={task?.status || null}\r\n          onSelect={setStatus}\r\n        />\r\n        <FormSelectorGlobal\r\n          label=\"Priority\"\r\n          name=\"priorityId\"\r\n          domainName=\"task\"\r\n          entityName=\"priority\"\r\n          selectorName=\"priorities\"\r\n          value={task?.priority || null}\r\n          onSelect={setPriority}\r\n        />\r\n        <FormSelectorGlobal\r\n          label=\"Type\"\r\n          name=\"typeId\"\r\n          domainName=\"task\"\r\n          entityName=\"type\"\r\n          selectorName=\"types\"\r\n          value={task?.type || null}\r\n          onSelect={setType}\r\n        />\r\n        <Form.Item name=\"executorId\" label=\"executor\" rules={[{\r\n          required: true,\r\n          message: `Please select user`,\r\n        }]}>\r\n          <Select\r\n          // onFocus={onActiveSelect}\r\n          // onChange={handleChange}\r\n          >\r\n            {users && users?.map(\r\n              (option: User) => <Select.Option\r\n                key={`${option.id}-${option.name}`}\r\n                value={option.id\r\n                }>{option.name}</Select.Option>,\r\n            )}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Row>\r\n            <Col span={24} style={{ textAlign: \"right\" }}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","import {\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormInstance,\r\n    Input,\r\n    message,\r\n    Row,\r\n} from 'antd';\r\nimport React from 'react';\r\nimport { CommentCraeteParams, User } from '../types';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst CommentForm: React.FC<{\r\n    authorId: number | null,\r\n    projectId: number | null,\r\n    taskId: number | null,\r\n    methodSubmitComment: (params: CommentCraeteParams) => void;\r\n}> = ({\r\n    authorId,\r\n    projectId,\r\n    taskId,\r\n    methodSubmitComment\r\n}) => {\r\n\r\n        const disaptch = useDispatch();\r\n        const [form]: [FormInstance<any>] = Form.useForm();\r\n        const { TextArea } = Input;\r\n        const onFinish = () => {\r\n            if (!projectId && !taskId) return message.error('Sytem not exist projectId or taskId !');\r\n            disaptch(methodSubmitComment({\r\n                authorId: authorId || 0,\r\n                projectId: projectId || 0,\r\n                taskId: taskId || 0,\r\n                body: form.getFieldValue('body'),\r\n            }));\r\n            form.resetFields();\r\n        };\r\n\r\n        return (<>\r\n            <Form form={form} layout=\"vertical\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"body\"\r\n                    label=\"Comment\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"If wou want add comment input some text\",\r\n                        },\r\n                          {\r\n                            min: 3,\r\n                            message: \"Min length 3\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <TextArea />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Row>\r\n                        <Col span={24} style={{ textAlign: \"right\" }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n        );\r\n    };\r\n\r\nexport default CommentForm;","import React from 'react';\r\nimport { Avatar, Comment, Tooltip } from 'antd';\r\nimport { ProjectComment } from '../types';\r\n\r\nconst CommentCard: React.FC<any> = ({ comment }: { comment: ProjectComment }) => (<>\r\n    <Comment\r\n        content={comment.body}\r\n        author={comment.author.name}\r\n        datetime={new Date(comment.createdAt).toLocaleDateString()}\r\n    />\r\n</>);\r\n\r\nexport default CommentCard;\r\n","import { Badge } from 'antd';\r\nimport React from 'react';\r\nimport { ColorTypes, Option } from '../types';\r\n\r\nconst OptionLabel: React.FC<any> = ({ option }: { option: Option }) => {\r\n    \r\n\r\n    const typeById: { [key: number | string]: ColorTypes } = {\r\n        1: 'success',\r\n        2: 'error',\r\n        3: 'default',\r\n        4: 'processing',\r\n    }\r\n\r\n    const colorStatus = typeById[option?.id] || 'default'; \r\n\r\n    return (<Badge status={`${colorStatus}`} text={option?.name || ''} />)\r\n};\r\n\r\nexport default OptionLabel;\r\n","import React, { useEffect } from \"react\";\r\nimport { Card, Collapse, Descriptions } from \"antd\";\r\nimport { ProjectBase, Task } from \"../../types\";\r\nimport FormSelectorGlobal from \"../FormSelectorGlobal\";\r\nimport { getTaskComments, taskCreateComment } from \"../../store/task/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { UserRootState } from \"../../store/user/reducer\";\r\nimport { TaskRootState } from \"../../store/task/reducer\";\r\nimport CommentForm from \"../CommentForm\";\r\nimport CommentCard from \"../CommentCard\";\r\nimport OptionLabel from \"../OptionLabel\";\r\n\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst Taskdetail: React.FC<{ task: Task }> = ({ task }) => {\r\n  const dispatch = useDispatch();\r\n  const authorId = useSelector((store: UserRootState) => store.user.userActive.id);\r\n  const comments = useSelector(\r\n    (store: TaskRootState) => store.task.taskComments[Number(task?.id || NaN)] || []\r\n  );\r\n\r\n  const onShowCommentBlock = (value: string | string[]) => {\r\n    if (value && !comments.length) dispatch(getTaskComments(Number(task.id || NaN)));\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n  }, [task])\r\n\r\n  return (\r\n    <Card\r\n      className=\"task-detail\"\r\n      title={<Descriptions>\r\n        <Descriptions.Item label=\"Title\"> {task.title}</Descriptions.Item>\r\n        <Descriptions.Item label=\"Created\"> {new Date(task.createdAt).toLocaleDateString()}</Descriptions.Item>\r\n      </Descriptions>}\r\n\r\n      hoverable\r\n    >\r\n      <div className=\"task-detail__body\">\r\n        <Descriptions>\r\n          <Descriptions.Item label=\"Description\"> {task.description}</Descriptions.Item>\r\n        </Descriptions>\r\n        <Descriptions>\r\n          <Descriptions.Item label=\"Status\">\r\n            <OptionLabel option={task.status} />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"Type\">\r\n            <OptionLabel option={task.type} />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"Priority\">\r\n            <OptionLabel option={task.priority} />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n        <Descriptions>\r\n          <Descriptions.Item label=\"Author\"> {task.author.name}</Descriptions.Item>\r\n          <Descriptions.Item label=\"Executor\"> {task.executor.name}</Descriptions.Item>\r\n        </Descriptions>\r\n\r\n      </div>\r\n      <Collapse accordion onChange={(value) => onShowCommentBlock(value)}>\r\n        <Panel header=\"Comments\" key={`task-${task.id}-comment-block`}>\r\n          <CommentForm\r\n            methodSubmitComment={taskCreateComment}\r\n            authorId={authorId}\r\n            projectId={null}\r\n            taskId={Number(task.id)} />\r\n          <div style={{ maxHeight: '250px', overflowY: 'auto' }}>\r\n            {comments?.map(\r\n              (comment: { id: any; }) => <div>\r\n                <CommentCard key={`comment-key-${comment.id}`} comment={comment} />\r\n              </div>)}\r\n          </div>\r\n        </Panel>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Taskdetail;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal, Popconfirm, Space, Table, Tooltip } from \"antd\";\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Task, Option, User } from \"../../types\";\r\nimport TaskForm from \"./TaskForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteTask, getTaskById } from \"../../store/task/actions\";\r\nimport { TaskRootState } from \"../../store/task/reducer\";\r\nimport Taskdetail from \"./TaskDetail\";\r\nimport OptionLabel from \"../OptionLabel\";\r\n\r\nconst TaskTable: React.FC<{ tasks: Task[], users: User[] }> = ({ tasks, users }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [taskModalForm, setTaskModalForm] = useState(false);\r\n  const [taskModalDetail, setTaskModalDetail] = useState(false);\r\n  const [currentTask, setCurrentTask] = useState<Task | null>(null);\r\n  const [currentTaskId, setCurrentTaskId] = useState<number>(NaN);\r\n  const tasksDetail = useSelector((store: TaskRootState) => store.task.tasksDetail);\r\n\r\n  const onEditTask = (id: number) => {\r\n    const selectedTask = tasks.find((task: Task) => task.id === id) || null;\r\n    setCurrentTask(selectedTask);\r\n    setTaskModalForm(true);\r\n  };\r\n  const onDeleteTask = (task: Task) => {\r\n    dispatch(deleteTask(task));\r\n  };\r\n  const onShowDetail = (id: number) => {\r\n    if (!tasksDetail[id]) dispatch(getTaskById(id))\r\n    setCurrentTaskId(id)\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: \"ID\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      render: (id: number) => <Button type=\"link\" onClick={() => onShowDetail(id)} >{id}</Button>,\r\n    },\r\n    {\r\n      title: \"Title\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n      render: (title: string, task: Task) => <Button type=\"link\" onClick={() => onShowDetail(task.id)}>{title}</Button>,\r\n    },\r\n    {\r\n      title: \"Description\",\r\n      dataIndex: \"description\",\r\n      key: \"description\",\r\n    },\r\n    {\r\n      title: \"Type\",\r\n      dataIndex: \"type\",\r\n      key: \"type\",\r\n      render: (option: Option) => <OptionLabel option={option} />,\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      render: (option: Option) => <OptionLabel option={option} />,\r\n    },\r\n    {\r\n      title: \"Priority\",\r\n      dataIndex: \"priority\",\r\n      key: \"Priority\",\r\n      render: (option: Option) => <OptionLabel option={option} />,\r\n    },\r\n    {\r\n      title: \"Actions\",\r\n      dataIndex: \"priority\",\r\n      key: \"Priority\",\r\n      render: (_: Option, task: Task) => (\r\n        <>\r\n          <Space size='small'>\r\n            <Button\r\n              type=\"primary\"\r\n              size=\"small\"\r\n              onClick={() => onEditTask(task.id)}\r\n              icon={<EditOutlined key=\"edit\" />}\r\n            >\r\n              Edit\r\n            </Button>\r\n            <Popconfirm\r\n              title=\"Do you wanna delete this task ?\"\r\n              onConfirm={() => onDeleteTask(task)}\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n            >\r\n              <Button\r\n                type=\"primary\"\r\n                size=\"small\"\r\n                icon={<DeleteOutlined key=\"edit\" />}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Popconfirm>\r\n          </Space>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title=\"Task form\"\r\n        visible={Boolean(currentTask?.id) && taskModalForm}\r\n        onOk={() => setTaskModalForm(false)}\r\n        onCancel={() => setTaskModalForm(false)}\r\n        footer={null}\r\n      >\r\n        <TaskForm\r\n          users={users}\r\n          projectId={currentTask?.projectId || null}\r\n          task={currentTask}\r\n          sendFormData={() => setTaskModalForm(false)}\r\n        />\r\n      </Modal>\r\n      <Modal\r\n        title=\"Detail task\"\r\n        width='auto'\r\n        visible={Boolean(currentTaskId) && Boolean(tasksDetail[currentTaskId]?.id)}\r\n        onOk={() => setCurrentTaskId(NaN)}\r\n        onCancel={() => setCurrentTaskId(NaN)}\r\n        footer={null}\r\n      >\r\n        <Taskdetail task={tasksDetail[currentTaskId]} />\r\n      </Modal>\r\n      <Table dataSource={tasks} columns={columns} bordered />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskTable;\r\n","import axios from \"axios\";\r\nimport { User} from \"../types\";\r\nimport { ResponseResult } from \"./auth\";\r\n\r\nconst url = 'http://localhost:7000/users'\r\n\r\n\r\nexport class userRepository {\r\n\r\n    static async getAll(): Promise<User[]> {\r\n        const response: any = await axios.get(`${url}`);\r\n        return response;\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Modal, Row, Space, Table, Transfer } from \"antd\";\r\nimport { User } from \"../../types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getUsers } from \"../../store/user/actions\";\r\nimport { UserRootState } from \"../../store/user/reducer\";\r\nimport { TransferDirection, TransferItem } from \"antd/lib/transfer\";\r\nimport { addUsersToProject, removeUsersFromProject } from \"../../store/project/actions\";\r\n\r\nconst UserTable: React.FC<{\r\n  projectId: number;\r\n  authorId: number;\r\n  users: User[]\r\n}> = ({\r\n  projectId,\r\n  authorId,\r\n  users }) => {\r\n    const dispatch = useDispatch();\r\n    const getUser = ({ id, name }: User): TransferItem => ({ key: id.toString(), title: name });\r\n    const allUsers = useSelector((store: UserRootState) => store.user.users);\r\n    const transfetAllUsers: TransferItem[] = allUsers.map(getUser)?.map((user: TransferItem) => ({\r\n      ...user,\r\n      disabled: Number(user.key) === authorId,\r\n    }));\r\n    const transfetProjectUsers: TransferItem[] = users.map(getUser);\r\n    const [teamEditModal, setTeamEditModal] = useState(false);\r\n    const [targetKeys, setTargetKeys] = useState<any>(transfetProjectUsers.map(({ key }) => key));\r\n    const [selectedKeys, setSelectedKeys] = useState<any>([]);\r\n\r\n    useEffect(() => {\r\n      if (teamEditModal) dispatch(getUsers());\r\n    }, [teamEditModal]);\r\n\r\n    const columns = [\r\n      {\r\n        title: \"ID\",\r\n        dataIndex: \"id\",\r\n        key: \"id\",\r\n      },\r\n      {\r\n        title: \"Login\",\r\n        dataIndex: \"login\",\r\n        key: \"login\",\r\n      },\r\n      {\r\n        title: \"Name\",\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n      },\r\n    ];\r\n\r\n\r\n\r\n    const handleChange = (\r\n      newTargetKeys: any[],\r\n      direction: TransferDirection,\r\n      moveKeys: string[],\r\n    ) => {\r\n      setTargetKeys(newTargetKeys);\r\n      const actionsByDirection = { left: removeUsersFromProject, right: addUsersToProject };\r\n      dispatch(actionsByDirection[direction]({ projectId, userIds: moveKeys })); // moveKeys\r\n    };\r\n\r\n    const handleSelectChange = (sourceSelectedKeys: string[], targetSelectedKeys: string[]) => {\r\n      setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Modal\r\n            title=\"Edit team\"\r\n            visible={teamEditModal}\r\n            onOk={() => setTeamEditModal(false)}\r\n            onCancel={() => setTeamEditModal(false)}\r\n            footer={null}\r\n          >\r\n            <Transfer\r\n              dataSource={transfetAllUsers}\r\n              titles={['Source', 'Target']}\r\n              targetKeys={targetKeys}\r\n              selectedKeys={selectedKeys}\r\n              onChange={handleChange}\r\n              onSelectChange={handleSelectChange}\r\n              render={(item: TransferItem) => `${item?.key}-${item?.title}` || ''}\r\n              oneWay\r\n              style={{ marginBottom: 16 }}\r\n            />\r\n          </Modal>\r\n          <Space style={{ marginBottom: 16 }}>\r\n            <Button onClick={() => { setTeamEditModal(true) }}>Edit</Button>\r\n          </Space>\r\n        </Row>\r\n        <Table dataSource={users} columns={columns} bordered />\r\n\r\n      </>\r\n    );\r\n  };\r\n\r\nexport default UserTable;\r\n","import { GET_USERS } from \"./types\";\r\nimport { userRepository } from \"../../repositpry/user\";\r\nimport { dispatchWrapper } from \"..\";\r\n\r\nexport const getUsers = () => \r\n    dispatchWrapper(userRepository.getAll, '', GET_USERS)","import { Button, Col, Modal, Row, Space, Collapse } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { PlusOutlined, EditOutlined } from \"@ant-design/icons\";\r\nimport ProjectForm from \"../components/Project/ProjectForm\";\r\nimport TaskTable from \"../components/Task/TaskTable\";\r\nimport { getProjectById, getProjectComments, projectCreateComment } from \"../store/project/actions\";\r\nimport { ProjectRootState } from \"../store/project/reducer\";\r\nimport TaskForm from \"../components/Task/TaskForm\";\r\nimport { getTasksByProjectId } from \"../store/task/actions\";\r\nimport { TaskRootState } from \"../store/task/reducer\";\r\nimport UserTable from \"../components/User/UserTable\";\r\nimport CommentForm from \"../components/CommentForm\";\r\nimport { UserRootState } from \"../store/user/reducer\";\r\nimport CommentCard from \"../components/CommentCard\";\r\nimport OptionLabel from \"../components/OptionLabel\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst ProjectDetail: React.FC = () => {\r\n  const { id }: { id: string } = useParams();\r\n  const dispatch = useDispatch();\r\n  const authorId = useSelector((store: UserRootState) => store.user.userActive.id);\r\n  const [projectModalForm, setProjectModalForm] = useState(false);\r\n  const [taskModalForm, setTasktModalForm] = useState(false);\r\n  useEffect(() => {\r\n    dispatch(getProjectById(Number(id)));\r\n    dispatch(getTasksByProjectId(Number(id)));\r\n  }, []);\r\n  const project = useSelector(\r\n    (store: ProjectRootState) => store.project.projectsDetail[Number(id)] || \"\"\r\n  );\r\n  const comments = useSelector(\r\n    (store: ProjectRootState) => store.project.projectComments[Number(id)] || []\r\n  );\r\n  const tasks = useSelector(\r\n    (store: TaskRootState) => store.task.tasksByProject[Number(id)] || \"\"\r\n  );\r\n\r\n  const onShowCommentBlock = (value: string | string[]) => {\r\n    if (value && !comments.length) dispatch(getProjectComments(Number(id)));\r\n  }\r\n\r\n  const {\r\n    title = \"\",\r\n    description = \"\",\r\n    status = { id: 9999, name: \"\" },\r\n  } = project;\r\n\r\n  return (\r\n    <>\r\n      <Row\r\n        justify=\"space-around\"\r\n        align=\"middle\"\r\n        style={{ padding: \"12px 0px\" }}\r\n      >\r\n        <Col span={4}>\r\n          <b>{title}</b>\r\n        </Col>\r\n        <Col span={4}>{description}</Col>\r\n        <Col span={4}><OptionLabel option={project.status} /></Col>\r\n        <Col span={4}>\r\n          <Space size=\"small\">\r\n            <Button\r\n              type=\"primary\"\r\n              size=\"small\"\r\n              onClick={() => setProjectModalForm(true)}\r\n              icon={<EditOutlined key=\"edit\" />}\r\n            >\r\n              Edit\r\n            </Button>\r\n            <Button\r\n              type=\"primary\"\r\n              size=\"small\"\r\n              icon={<PlusOutlined />}\r\n              onClick={() => setTasktModalForm(true)}\r\n            >\r\n              Task\r\n            </Button>\r\n          </Space>\r\n        </Col>\r\n      </Row>\r\n      <Collapse accordion>\r\n        <Panel header=\"Team\" key=\"1\">\r\n          <UserTable projectId={project.id} authorId={project.authorId} users={project.team} ></UserTable>\r\n        </Panel>\r\n      </Collapse>\r\n      <Row>\r\n        <Modal\r\n          title=\"Projetc form\"\r\n          visible={projectModalForm}\r\n          onOk={() => setProjectModalForm(false)}\r\n          onCancel={() => setProjectModalForm(false)}\r\n          footer={null}\r\n        >\r\n          <ProjectForm\r\n            project={project}\r\n            sendFormData={() => setProjectModalForm(false)}\r\n          />\r\n        </Modal>\r\n        <Modal\r\n          title=\"Task form\"\r\n          visible={taskModalForm}\r\n          onOk={() => setTasktModalForm(false)}\r\n          onCancel={() => setTasktModalForm(false)}\r\n          footer={null}\r\n        >\r\n          <TaskForm\r\n            projectId={project.id}\r\n            task={null}\r\n            sendFormData={() => setTasktModalForm(false)} users={project.team} />\r\n        </Modal>\r\n      </Row>\r\n      <Collapse accordion onChange={(value) => onShowCommentBlock(value)}>\r\n        <Panel header=\"Comments\" key=\"2\">\r\n          <CommentForm\r\n            methodSubmitComment={projectCreateComment}\r\n            authorId={authorId}\r\n            projectId={Number(id)}\r\n            taskId={null} />\r\n          <div style={{ maxHeight: '300px', overflowY: 'auto' }}>\r\n            {comments?.map(\r\n              (comment: { id: any; }) => <div>\r\n                <CommentCard key={`comment-key-${comment.id}`} comment={comment} />\r\n              </div>)}\r\n          </div>       </Panel>\r\n      </Collapse>\r\n      <TaskTable users={project.team} tasks={tasks} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectDetail;\r\n","import Auth from \"../pages/Auth\";\r\nimport Home from \"../pages/Home\";\r\nimport AuthLayout from \"../layouts/AuthLayout\";\r\nimport BaseLayout from \"../layouts/BaseLayout\";\r\nimport ProjectDetail from \"../pages/ProjectDeail\";\r\n\r\nexport type RouterApp = {\r\n    path: string;\r\n    isGuard: boolean;\r\n    component: JSX.Element;\r\n};\r\n\r\nexport const routers:RouterApp[] = [\r\n    {\r\n        path: '/',\r\n        isGuard: true,\r\n        component: <BaseLayout><Home/></BaseLayout>,\r\n    },\r\n    {\r\n        path: `/project/:id`,\r\n        isGuard: true,\r\n        component: <BaseLayout><ProjectDetail/></BaseLayout>,\r\n    },\r\n    {\r\n        path: '/auth',\r\n        isGuard: false,\r\n        component: <AuthLayout><Auth/></AuthLayout>,\r\n    }];","import { useSelector } from \"react-redux\";\r\nimport {Redirect, Route, BrowserRouter as Router, Switch} from \"react-router-dom\";\r\nimport { AuthRootState } from \"../store/auth/reducer\";\r\nimport {RouterApp, routers} from \"./routers\";\r\n\r\n\r\n\r\nconst getFilteredRoutesByAuthorizationUser = (userIsAuth: Boolean) => routers\r\n    .filter(({isGuard = false}) => isGuard === userIsAuth);\r\nconst getRedirectPath = (isAuthorization: Boolean) => isAuthorization ? '/' : '/auth';\r\n\r\nexport const useRoutes = (isAuthorization: Boolean = false) => {\r\n    const isUserActive = useSelector((store: AuthRootState) => Boolean(store.auth.userActive?.token));\r\n    const filteredRoutes = getFilteredRoutesByAuthorizationUser(isUserActive);\r\n        return (<Router>\r\n        <Switch>\r\n            {filteredRoutes.map((router: RouterApp) => <Route key={router.path} exact path={router.path}>\r\n                {router.component}\r\n            </Route>)}\r\n            <Redirect\r\n                to={{pathname: getRedirectPath(isAuthorization)}}\r\n                exact\r\n            />\r\n        </Switch></Router>);\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {useRoutes} from \"./router\";\r\nimport 'antd/dist/antd.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AuthRootState} from \"./store/auth/reducer\";\r\n\r\nconst App: React.FC = () => {\r\n    const userActive = useSelector((state: AuthRootState) => state.auth.userActive);\r\n    const routes = useRoutes(Boolean(userActive?.token));\r\n\r\n    return (\r\n    <div className=\"App\">\r\n          { routes }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './plugins/index';\r\nimport configureStore from './store/index';\r\nimport { message } from 'antd';\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n <Provider store={store}> <App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\nreportWebVitals();\r\n"],"sourceRoot":""}